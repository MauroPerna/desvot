/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface DesvotInterface extends utils.Interface {
  functions: {
    "candidates(address)": FunctionFragment;
    "electionState()": FunctionFragment;
    "endingVote()": FunctionFragment;
    "owner()": FunctionFragment;
    "payFee()": FunctionFragment;
    "randomWord()": FunctionFragment;
    "rawFulfillRandomWords(uint256,uint256[])": FunctionFragment;
    "registerCandidate(address)": FunctionFragment;
    "registerVoter()": FunctionFragment;
    "registrationFee()": FunctionFragment;
    "requestRandomWords()": FunctionFragment;
    "s_randomWords(uint256)": FunctionFragment;
    "s_requestId()": FunctionFragment;
    "scrutiny()": FunctionFragment;
    "startVoting()": FunctionFragment;
    "totalFunds()": FunctionFragment;
    "totalVotes()": FunctionFragment;
    "vote(address)": FunctionFragment;
    "voteBalotaje(address)": FunctionFragment;
    "voters(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "candidates"
      | "electionState"
      | "endingVote"
      | "owner"
      | "payFee"
      | "randomWord"
      | "rawFulfillRandomWords"
      | "registerCandidate"
      | "registerVoter"
      | "registrationFee"
      | "requestRandomWords"
      | "s_randomWords"
      | "s_requestId"
      | "scrutiny"
      | "startVoting"
      | "totalFunds"
      | "totalVotes"
      | "vote"
      | "voteBalotaje"
      | "voters"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "candidates",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "electionState",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "endingVote",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "payFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "randomWord",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rawFulfillRandomWords",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "registerCandidate",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVoter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registrationFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestRandomWords",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "s_randomWords",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "s_requestId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "scrutiny", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startVoting",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalVotes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "voteBalotaje",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "voters",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "candidates", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "electionState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endingVote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "randomWord", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rawFulfillRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registrationFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRandomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_randomWords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "s_requestId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "scrutiny", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalFunds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteBalotaje",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voters", data: BytesLike): Result;

  events: {
    "ChangeVotingState(uint8)": EventFragment;
    "FundsTransfered(uint256)": EventFragment;
    "ReturnedRandomness(uint256[])": EventFragment;
    "Voted(address)": EventFragment;
    "WinnerAnnounced(address,uint256,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChangeVotingState"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsTransfered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReturnedRandomness"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinnerAnnounced"): EventFragment;
}

export interface ChangeVotingStateEventObject {
  state: number;
}
export type ChangeVotingStateEvent = TypedEvent<
  [number],
  ChangeVotingStateEventObject
>;

export type ChangeVotingStateEventFilter =
  TypedEventFilter<ChangeVotingStateEvent>;

export interface FundsTransferedEventObject {
  balanceCollected: BigNumber;
}
export type FundsTransferedEvent = TypedEvent<
  [BigNumber],
  FundsTransferedEventObject
>;

export type FundsTransferedEventFilter = TypedEventFilter<FundsTransferedEvent>;

export interface ReturnedRandomnessEventObject {
  randomWords: BigNumber[];
}
export type ReturnedRandomnessEvent = TypedEvent<
  [BigNumber[]],
  ReturnedRandomnessEventObject
>;

export type ReturnedRandomnessEventFilter =
  TypedEventFilter<ReturnedRandomnessEvent>;

export interface VotedEventObject {
  candidateAddress: string;
}
export type VotedEvent = TypedEvent<[string], VotedEventObject>;

export type VotedEventFilter = TypedEventFilter<VotedEvent>;

export interface WinnerAnnouncedEventObject {
  winnerAddress: string;
  votesWinner: BigNumber;
  addressRunnerUp: string;
  votesRunnerUp: BigNumber;
}
export type WinnerAnnouncedEvent = TypedEvent<
  [string, BigNumber, string, BigNumber],
  WinnerAnnouncedEventObject
>;

export type WinnerAnnouncedEventFilter = TypedEventFilter<WinnerAnnouncedEvent>;

export interface Desvot extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DesvotInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    candidates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, boolean] & {
        feePaid: boolean;
        isRegistered: boolean;
        votesReceived: BigNumber;
        balotaje: boolean;
      }
    >;

    electionState(overrides?: CallOverrides): Promise<[number]>;

    endingVote(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    payFee(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    randomWord(overrides?: CallOverrides): Promise<[BigNumber]>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerCandidate(
      _candidateAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerVoter(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registrationFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestRandomWords(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    s_randomWords(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    s_requestId(overrides?: CallOverrides): Promise<[BigNumber]>;

    scrutiny(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startVoting(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalFunds(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalVotes(overrides?: CallOverrides): Promise<[BigNumber]>;

    vote(
      _candidateAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteBalotaje(
      _candidateAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean] & {
        isRegistered: boolean;
        hasVoted: boolean;
        hasVotedInBalotaje: boolean;
      }
    >;
  };

  candidates(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber, boolean] & {
      feePaid: boolean;
      isRegistered: boolean;
      votesReceived: BigNumber;
      balotaje: boolean;
    }
  >;

  electionState(overrides?: CallOverrides): Promise<number>;

  endingVote(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  payFee(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  randomWord(overrides?: CallOverrides): Promise<BigNumber>;

  rawFulfillRandomWords(
    requestId: PromiseOrValue<BigNumberish>,
    randomWords: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerCandidate(
    _candidateAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerVoter(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registrationFee(overrides?: CallOverrides): Promise<BigNumber>;

  requestRandomWords(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  s_randomWords(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  s_requestId(overrides?: CallOverrides): Promise<BigNumber>;

  scrutiny(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startVoting(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalFunds(overrides?: CallOverrides): Promise<BigNumber>;

  totalVotes(overrides?: CallOverrides): Promise<BigNumber>;

  vote(
    _candidateAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteBalotaje(
    _candidateAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voters(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, boolean] & {
      isRegistered: boolean;
      hasVoted: boolean;
      hasVotedInBalotaje: boolean;
    }
  >;

  callStatic: {
    candidates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber, boolean] & {
        feePaid: boolean;
        isRegistered: boolean;
        votesReceived: BigNumber;
        balotaje: boolean;
      }
    >;

    electionState(overrides?: CallOverrides): Promise<number>;

    endingVote(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    payFee(overrides?: CallOverrides): Promise<void>;

    randomWord(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    registerCandidate(
      _candidateAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerVoter(overrides?: CallOverrides): Promise<void>;

    registrationFee(overrides?: CallOverrides): Promise<BigNumber>;

    requestRandomWords(overrides?: CallOverrides): Promise<void>;

    s_randomWords(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_requestId(overrides?: CallOverrides): Promise<BigNumber>;

    scrutiny(overrides?: CallOverrides): Promise<void>;

    startVoting(overrides?: CallOverrides): Promise<void>;

    totalFunds(overrides?: CallOverrides): Promise<BigNumber>;

    totalVotes(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _candidateAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    voteBalotaje(
      _candidateAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    voters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, boolean] & {
        isRegistered: boolean;
        hasVoted: boolean;
        hasVotedInBalotaje: boolean;
      }
    >;
  };

  filters: {
    "ChangeVotingState(uint8)"(state?: null): ChangeVotingStateEventFilter;
    ChangeVotingState(state?: null): ChangeVotingStateEventFilter;

    "FundsTransfered(uint256)"(
      balanceCollected?: null
    ): FundsTransferedEventFilter;
    FundsTransfered(balanceCollected?: null): FundsTransferedEventFilter;

    "ReturnedRandomness(uint256[])"(
      randomWords?: null
    ): ReturnedRandomnessEventFilter;
    ReturnedRandomness(randomWords?: null): ReturnedRandomnessEventFilter;

    "Voted(address)"(candidateAddress?: null): VotedEventFilter;
    Voted(candidateAddress?: null): VotedEventFilter;

    "WinnerAnnounced(address,uint256,address,uint256)"(
      winnerAddress?: null,
      votesWinner?: null,
      addressRunnerUp?: null,
      votesRunnerUp?: null
    ): WinnerAnnouncedEventFilter;
    WinnerAnnounced(
      winnerAddress?: null,
      votesWinner?: null,
      addressRunnerUp?: null,
      votesRunnerUp?: null
    ): WinnerAnnouncedEventFilter;
  };

  estimateGas: {
    candidates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    electionState(overrides?: CallOverrides): Promise<BigNumber>;

    endingVote(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    payFee(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    randomWord(overrides?: CallOverrides): Promise<BigNumber>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerCandidate(
      _candidateAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerVoter(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registrationFee(overrides?: CallOverrides): Promise<BigNumber>;

    requestRandomWords(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    s_randomWords(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    s_requestId(overrides?: CallOverrides): Promise<BigNumber>;

    scrutiny(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startVoting(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalFunds(overrides?: CallOverrides): Promise<BigNumber>;

    totalVotes(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      _candidateAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteBalotaje(
      _candidateAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    candidates(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    electionState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endingVote(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    payFee(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    randomWord(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rawFulfillRandomWords(
      requestId: PromiseOrValue<BigNumberish>,
      randomWords: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerCandidate(
      _candidateAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerVoter(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registrationFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestRandomWords(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    s_randomWords(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    s_requestId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    scrutiny(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startVoting(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalFunds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalVotes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      _candidateAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteBalotaje(
      _candidateAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voters(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
